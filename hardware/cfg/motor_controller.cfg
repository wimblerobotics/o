#!/usr/bin/env python
PACKAGE = 'motor_controller'

from dynamic_reconfigure.parameter_generator_catkin import *

# Levels
# 1 => file open parameters
#       port_address, usb_device_name, vmin, vtime
# 2 => RoboClaw write parameters
#       m1_d, m1_i, m1_p, , m1_qpps, m2_d, m2_i, m2_p, m2_qpps
# 4 => RoboClaw sense-related parameters.
#       max_m1_current, max_m2_current
# 8 => ros_control related parameters.
#       control_loop_hz
# 16 => Internal policy
#       max_command_retries, max_seconds_uncommanded_travel
# 32 => Physics, model
#       quad_pulses_per_meter, quad_pulses_per_revolution, wheel_radius

gen = ParameterGenerator()
gen.add("control_loop_hz", double_t, 8, "Rate for running main ros_control loop", 10, 0, 200);

gen.add("m1_d", double_t, 2, "motor m1 pid d", 0, 0, 2000);
gen.add("m1_i", double_t, 2, "motor m1 pid i", 3.94584, 0, 15000);
gen.add("m1_p", double_t, 2, "motor m1 pid p", 12.40624, 0, 15000);
gen.add("m1_qpps", int_t, 2, "motor m1 qpps", 937, 0, 10000);

gen.add("m2_d", double_t, 2, "motor m2 pid d", 0, 0, 2000);
gen.add("m2_i", double_t, 2, "motor m2 pid i", 4.38229, 0, 15000);
gen.add("m2_p", double_t, 2, "motor m2 pid p", 12.40624, 0, 15000);
gen.add("m2_qpps", int_t, 2, "motor m2 qpps", 1312, 0, 10000);

gen.add("max_command_retries", int_t, 16, "Maximum times to retry on communication error", 20, 0, 50);
gen.add("max_m1_current", double_t, 4, "Max amps allowed for motor m1", 12, 0, 30);
gen.add("max_m2_current", double_t, 4, "Max amps allowed for motor m1", 12, 0, 30);
gen.add("max_seconds_uncommanded_travel", double_t, 16, "stop robot if no command received in this number seconds", 0.5, 0, 5);
gen.add("port_address", int_t, 1, "RoboClaw device port address", 1312, 0, 10000);
gen.add("quad_pulses_per_meter", double_t, 32, "quadrature encoder pulses per meter", 1566, 0, 24000);
gen.add("quad_pulses_per_revolution", double_t, 32, "quadrature encoder pulses per wheel revolution", 1000, 0, 4800);
gen.add("usb_device_name", str_t, 1, "device name of RoboClaw", "/dev/roboclaw");
gen.add("vmin", int_t, 1, "stty vmin characters received", 1, 0, 10000);
gen.add("vtime", int_t, 1, "stty time tenths of a second", 2, 0, 10000);
gen.add("wheel_radius", double_t, 32, "wheel radius", 0.10169, 0, 2);

exit(gen.generate(PACKAGE, "motor_controller_node", "motor_controller"))