base_local_planner: 'dwa_local_planner/DWAPlannerROS'
DWAPlannerROS:
  acc_lim_th: 0.5 #2.0            # The rotational acceleration limit of the robot in radians/sec^2
  acc_lim_x: 0.5 #1.0             # The x acceleration limit of the robot in meters/sec^2
  acc_lim_y: 0 #2.5               # The y acceleration limit of the robot in meters/sec^2
  controller_frequency: 10        # The frequency at which this controller will be called in Hz. (20)
  forward_point_distance: 0.325   # The distance from the center point of the robot to place an additional scoring point, in meters
  goal_distance_bias: 0.02        # The weighting for how much the controller should attempt to reach its local goal, also controls speed
  latch_xy_goal_tolerance: false  # If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so. (false)
  max_scaling_factor: 0.2         # The maximum factor to scale the robot's footprint by (0.2)
  max_vel_theta: 0.5              # The absolute value of the maximum rotational velocity for the robot in rad/s
  max_vel_trans: 0.5              # The absolute value of the maximum translational velocity for the robot in m/s
  max_vel_x: 0.55                 # The maximum x velocity for the robot in m/s.
  max_vel_y: 0.0                  # The maximum y velocity for the robot in m/s
  min_vel_theta: 0.1              # The absolute value of the minimum rotational velocity for the robot in rad/s
  min_vel_trans: 0.1              # The absolute value of the minimum translational velocity for the robot in m/s
  min_vel_x: 0.1                  # The minimum x velocity for the robot in m/s, negative for backwards motion.
  min_vel_y: 0.0                  # The minimum y velocity for the robot in m/s
  occdist_scale: 0.02             # The weighting for how much the controller should attempt to avoid obstacles (0.01)
  oscillation_reset_dist: 0.05    # How far the robot must travel in meters before oscillation flags are reset
  path_distance_bias:  32.0        # The weighting for how much the controller should stay close to the path it was given (32.0)
  publish_cost_grid: true         # Whether or not to publish the cost grid that the planner will use when planning.
  prune_plan: true                # Defines whether or not to eat up the plan as the robot moves along the path
  scaling_speed: 0.25             # The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
  sim_granularity: 0.0254         # The step size, in meters, to take between points on a given trajectory
  sim_time: 4.0                   # The amount of time to forward-simulate trajectories in seconds
  stop_time_buffer: 0.2           # The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds (0.2)
  theta_stopped_vel: 0.4 #####
  trans_stopped_vel: 0.1
  vth_samples: 40                 # The number of samples to use when exploring the theta velocity space
  vx_samples: 20 #6                   # The number of samples to use when exploring the x velocity space (3)
  vy_samples: 1                   # The number of samples to use when exploring the y velocity space
  xy_goal_tolerance: 0.10         # The tolerance in meters for the controller in the x & y distance when achieving a goal
  yaw_goal_tolerance: 0.10        # The tolerance in radians for the controller in yaw/rotation when achieving its goal (0.05)

  acc_lim_theta: 0.52 #2.0 
  vtheta_samples: 22